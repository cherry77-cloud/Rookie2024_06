1.  Go 语言中常用的环境变量及其详细说明，涵盖模块管理、编译构建、测试调试
◼ 核心配置
    ● GOROOT -> Go 的安装路径(存放编译器、标准库)
    ● GOPATH -> 工作目录(存放代码、依赖、二进制文件，默认 ~/go 或 %USERPROFILE%\go)
    ● GOBIN -> go install 安装的二进制文件存放路径
◼ 模块管理(Go Modules)
    ● GO111MODULE -> 控制 Go Modules 模式：on(强制启用)、off(禁用)、auto(自动)
    ● GOPROXY -> 模块代理服务器地址(加速依赖下载)
    ● GOPRIVATE -> 私有模块路径(不通过代理和校验数据库)
    ● GONOPROXY -> 指定不通过代理下载的模块路径
    ● GONOSUMDB	-> 指定不校验哈希的模块路径
    ● GOSUMDB -> 校验和数据库地址(默认 sum.golang.org)
    ● GOINSECURE -> 允许通过 HTTP 下载的模块路径
◼ 编译构建
    ● GOOS -> 目标操作系统(交叉编译)
    ● GOARCH -> 目标 CPU 架构(交叉编译)
    ● CGO_ENABLED -> 是否启用 CGO(1 启用，0 禁用)
    ● CC/CXX -> 指定 C/C++ 编译器(用于 CGO)
    ● GOEXE -> 指定生成的可执行文件后缀(如 Windows 的 .exe)
    ● GOMODCACHE -> 模块缓存目录(存放下载的依赖包)
◼ 测试与调试
    ● GOFLAGS -> 为 go 命令设置默认参数
    ● GODEBUG -> 启用调试功能(如内存、GC 行为)
    ● GOTRACEBACK -> 控制程序崩溃时的堆栈信息级别
    ● GOTESTTIMEOUT -> 设置测试超时时间(Go 1.20+)
◼ 其他实用变量
    ● GOMAXPROCS -> 设置程序可用的最大 CPU 核心数
    ● GOWORK -> 启用工作区模式(多模块开发，Go 1.18+)
    ● GOTOOLCHAIN -> 指定使用的 Go 工具链版本
    ● GO_EXTLINK_ENABLED -> 控制是否使用外部链接器(CGO)


2. Go 语言中常用的命令行工具及详细说明，涵盖开发、构建、测试、依赖管理等核心场景
◼ 项目初始化与依赖管理
    ● go mod init <模块名> => 初始化 Go 模块(创建 go.mod 文件)
    ● go mod tidy => 自动添加缺失的依赖，删除未使用的依赖
    ● go get <包路径> => 下载并安装依赖包
    ● go get -u <包路径> => 更新依赖到最新版本
    ● go list -m all => 查看当前项目的所有依赖
    ● go list -json <包路径>	 => 查看包的详细信息(JSON 格式)
◼ 编译与运行
    ● go run <文件> => 直接运行 Go 文件(不生成二进制)
    ● go build => 编译当前目录的代码，生成可执行文件(默认输出到当前目录)
    ● go build -o <输出名> => 指定输出文件名
    ● go install => 编译并安装到 $GOPATH/bin
    ● go clean => 清理编译生成的文件(如可执行文件、临时文件)
    ● go env => 查看所有 Go 环境变量
    ● go version => 查看 Go 版本


3. Go 语言的核心优势
◼ 直接编译为机器码，无运行时依赖
    ● 静态编译: Go代码直接编译成机器码(如Linux的ELF、Windows的PE格式)，无需虚拟机或解释器
    ● 单一二进制文件: 所有依赖(包括标准库和第三方包)被打包到最终的可执行文件中，部署时无需安装额外环境
    ● 跨平台支持: 通过GOOS和GOARCH环境变量，可轻松编译不同操作系统和架构的程序
◼ 高效的并发模型：Goroutine与调度器
    ● Goroutine: 轻量级线程(协程)，初始栈大小仅2KB(线程通常为1-2MB)，可轻松创建百万级并发
    ● GMP调度模型: Goroutine -> 用户态协程, Machine -> 操作系统线程, Processor -> 逻辑处理器，负责调度Goroutine到线程
    ● 非阻塞异步IO: 基于epoll(Linux)或kqueue(BSD)的高效网络模型，避免线程切换开销
◼ 高效且低延迟的垃圾回收（GC）
    ● 并发标记清除算法: Go的GC在大多数阶段与用户代码并发执行，减少停顿时间
    ● 三色标记法: 通过白、灰、黑三色标记对象，精准追踪存活对象
◼ 简洁的语法与极低的学习成本
    ● 25 个关键字: Go语言仅有25个保留关键字，语法简洁易学。
    ● 代码规范统一: 强制使用gofmt格式化代码，消除风格争议。
        break     default      func     interface  select
        case      defer        go       map        struct
        chan      else         goto     package    switch
        const     fallthrough  if       range      type
        continue  for          import   return     var
